name: Cleanup Old Resources

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  cleanup-ecr:
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Delete old ECR images
        run: |
          echo "🧹 Cleaning up old ECR images..."
          
          # Keep only the last 10 images for each repository
          for REPO in litedesk-backend litedesk-frontend; do
            echo "Cleaning $REPO..."
            
            # Get image digests older than 30 days
            OLD_IMAGES=$(aws ecr describe-images \
              --repository-name $REPO \
              --query 'sort_by(imageDetails,& imagePushedAt)[:-10].[imageDigest]' \
              --output text)
            
            if [ -n "$OLD_IMAGES" ]; then
              echo "Deleting old images from $REPO..."
              echo "$OLD_IMAGES" | while read digest; do
                aws ecr batch-delete-image \
                  --repository-name $REPO \
                  --image-ids imageDigest=$digest || true
              done
            else
              echo "No old images to delete in $REPO"
            fi
          done
          
          echo "✅ ECR cleanup complete"
  
  cleanup-terminated-instances:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        working-directory: ./server
        run: npm ci
      
      - name: Run cleanup script
        working-directory: ./server
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          node << 'EOF'
          const mongoose = require('mongoose');
          const InstanceRegistry = require('./models/InstanceRegistry');
          
          async function cleanup() {
            try {
              await mongoose.connect(process.env.MONGO_URI);
              console.log('Connected to MongoDB');
              
              // Find instances terminated more than 90 days ago
              const ninetyDaysAgo = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000);
              
              const oldTerminatedInstances = await InstanceRegistry.find({
                status: 'terminated',
                terminatedAt: { $lt: ninetyDaysAgo }
              });
              
              console.log(`Found ${oldTerminatedInstances.length} old terminated instances`);
              
              // Archive or delete old instances
              for (const instance of oldTerminatedInstances) {
                console.log(`Archiving instance: ${instance.subdomain}`);
                // In production, you might want to:
                // 1. Export data to S3
                // 2. Keep a minimal record
                // 3. Delete from active database
                
                // For now, just log
                // await instance.deleteOne();
              }
              
              await mongoose.connection.close();
              console.log('✅ Cleanup complete');
            } catch (error) {
              console.error('❌ Cleanup error:', error);
              process.exit(1);
            }
          }
          
          cleanup();
          EOF

