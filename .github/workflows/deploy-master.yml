name: Deploy Master Control Plane

on:
  push:
    branches: [main, production]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: litedesk-production
  NAMESPACE: litedesk-master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file Dockerfile.backend \
            --tag $ECR_REGISTRY/litedesk-backend:$IMAGE_TAG \
            --tag $ECR_REGISTRY/litedesk-backend:latest \
            --push \
            .
      
      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file Dockerfile.frontend \
            --tag $ECR_REGISTRY/litedesk-frontend:$IMAGE_TAG \
            --tag $ECR_REGISTRY/litedesk-frontend:latest \
            --push \
            .
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ env.EKS_CLUSTER_NAME }}
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'
      
      - name: Deploy with Helm
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          helm upgrade litedesk-master ./helm/litedesk \
            --install \
            --namespace ${{ env.NAMESPACE }} \
            --create-namespace \
            --set image.backend.repository=$ECR_REGISTRY/litedesk-backend \
            --set image.backend.tag=$IMAGE_TAG \
            --set image.frontend.repository=$ECR_REGISTRY/litedesk-frontend \
            --set image.frontend.tag=$IMAGE_TAG \
            --set ingress.enabled=true \
            --set ingress.hosts[0].host=${{ secrets.MASTER_DOMAIN }} \
            --set ingress.hosts[0].paths[0].path=/ \
            --set ingress.tls[0].secretName=litedesk-master-tls \
            --set ingress.tls[0].hosts[0]=${{ secrets.MASTER_DOMAIN }} \
            --wait \
            --timeout 10m
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/litedesk-backend -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/litedesk-frontend -n ${{ env.NAMESPACE }}
      
      - name: Run health check
        run: |
          sleep 30  # Wait for services to be ready
          MASTER_URL="https://${{ secrets.MASTER_DOMAIN }}"
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $MASTER_URL/health)
          
          if [ $STATUS_CODE -eq 200 ]; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ùå Health check failed with status code: $STATUS_CODE"
            exit 1
          fi
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Deployment successful!"
          echo "Master Control Plane: https://${{ secrets.MASTER_DOMAIN }}"
          echo "Image Tag: ${{ github.sha }}"
      
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for details."

